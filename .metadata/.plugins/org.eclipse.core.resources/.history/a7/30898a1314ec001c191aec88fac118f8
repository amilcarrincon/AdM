.syntax unified
.thumb
.text

@ Simbolos exportados
.global asm_svc
.global asm_sum
.global asm_zeros
.global asm_productoEscalar32
.global asm_productoEscalar16
.global asm_productoEscalar12
.global asm_filtroVentana10
.global asm_pack32to16
.global asm_max
.global asm_downsampleM
.global asm_invertir
.global asm_corr

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
        bx lr


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   uint32_t asmSum (uint32_t firstOperand, uint32_t secondOperand)
@
@ Parametros recibidos:
@   r0: firstOperand
@   r1: secondOperand
@
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
                    @ es la direccion, en el codigo del programa, de la
                    @ instruccion "bl asm_sum" usada para saltar a
                    @ esta funcion, entonces "lr" contiene ese "pc" + 4).
                    @ el valor de retorno debe quedar en el registro r0.
                    @ En este caso, r0 es el resultado de r0 + r1.

        @ Otras alternativas para el retorno
        @ mov pc,lr
        @ bx lr
        @ push {lr} ... pop {pc}

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

 .thumb_func
  	asm_zeros:
      push {lr}  /* guardamos la direccion de retorno en la pila */
      sub	len,1
      ldr	valor,=0
  	Lazo:
      str	valor,[VecIn,len,LSL 2]
      subs len,#1
      bpl	Lazo
	  //add op1, op2 /* r0 = r0 + r1 */
	  pop {pc}   /* retorno */

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

  .thumb_func
	asm_productoEscalar32:
		push {lr}  /* guardamos la direccion de retorno en la pila */
    	sub	len,1
	Lazo:
		ldr	resul,[VecIn,len,LSL 2]
		mul resul,esca
    	str	resul,[VecOut,len,LSL 2]
    	subs len,1
    	bpl	Lazo
		//add op1, op2 /* r0 = r0 + r1 */
		pop {pc}   /* retorno */

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

.thumb_func
	asm_productoEscalar16:
		push {r4,lr}  /* guardamos la direccion de retorno en la pila */
    	sub	len,1
	Lazo:
		ldrh resul,[VecIn,len,LSL 1]
		mul  resul,esca
    	strh resul,[VecOut,len,LSL 1]
    	subs len,1
    	bpl	Lazo
		//add op1, op2 /* r0 = r0 + r1 */
		pop {r4, pc}   /* retorno */

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

.thumb_func
	asm_productoEscalar12:













